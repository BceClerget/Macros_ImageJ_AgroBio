package fr.cirad.image.aerenchyme;

import java.io.File;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.List;

import com.opencsv.CSVReader;

import io.github.rocsg.fijiyama.common.Timer;
import io.github.rocsg.fijiyama.common.VitimageUtils;
import io.github.rocsg.fijiyama.common.VitiDialogs;
import ij.IJ;
import ij.ImageJ;
import ij.ImagePlus;
import ij.gui.Roi;
import ij.plugin.frame.RoiManager;
import ij.WindowManager;
	
	
	public static void computeSummaryOfLacuneData(String dirExp,String pathToOutputCsv,boolean newWay) {
		int typePaula=1;
		int typeSergi=0;
		int typePheno=2;
		int typeThis=typeSergi;
		IJ.log(dirExp);
		String dirSource=new File(dirExp,"1_Source").getAbsolutePath();
		String dirRoi=new File(dirExp,"3_CellRoi").getAbsolutePath();
		String dirCortex=new File(dirExp,"2_AreaRoi").getAbsolutePath();
		String dirLac=new File(dirExp,"4_LacunesIndices").getAbsolutePath();
		String[]imgNames=new File(dirSource).list();
		typeThis=determineProvider(imgNames);
		IJ.log("Type="+typeThis);
		
		

		ArrayList<String>ar=new ArrayList<String>();
		for(String s:imgNames)ar.add(s);
		ar.sort(null);
		int N=ar.size();
		String[][]finalTab=new String[N+1][14];
		//"7_MEASURE_total_cortex_surface",
		//"8_MEASURE_strict_stele_surface_without_endoderm",
		//"9_MEASURE_endoderm_surface",
		//"10_MEASURE_imaged_cortex_surface",
		//"11_MEASURE_imaged_lacune_surface",
		//"12_COMPUTED_ratio_lacune_over_imaged_cortex",
		//"13_COMPUTED_Full_cortex_over_strict_stele_ratio"}
		finalTab[0]=new String[] {"0_PARAM_ImgName","1_PARAM_INFO","2_PARAM_Geno","3_PARAM_Management","4_PARAM_Depth","5_PARAM_Repetition","6_PARAM_Magnification","7_MEASURED_total_cortex_surface","8_MEASURED_strict_stele_surface_without_endoderm","9_MEASURED_endoderm_surface","10_MEASURED_lacune_and_cytoplasms_surface","11_MEASURED_lacune_surface","12_COMPUTED_lacune_ratio_percent","13_COMPUTED_cortex_over_stele_ratio"};
		Timer t=new Timer();
		for(int i=0;i<N;i++) {
			String[]tab=new String[14];
			tab[0]=ar.get(i);
			tab[1]="No info";
			String baseName=ar.get(i).split(".tif")[0];
			IJ.log("Image "+i+" / "+N+" = "+baseName);
	
			if(!new File(dirLac,baseName+".tif.csv").exists()){
				tab[1]="Lacune annotations were not provided";
				IJ.showMessage("You got a problem. A lacune csv file was not found : "+baseName+".tif.csv");
				for(int iii=2;iii<11;iii++)tab[iii]="NA";
				finalTab[i+1]=tab;
				continue;
			}
			if(typeThis==typePheno){
				IJ.log(baseName);
				tab[2]=baseName.split("_")[0];//Geno
				tab[3]=baseName.split("_")[1+(newWay ? 1 : 0)];//Management
				tab[4]=baseName.split("_")[2+(newWay ? 1 : 0)];//Depth
				tab[5]=baseName.split("_")[3+(newWay ? 1 : 0)];//Repet
				tab[6]=""+getMagnification(dirSource+"/"+baseName+".tif");//Magnification

			}
			if(typeThis==typePaola){
				//      5_   A     2         S     B        _10
				//all	Geno Man Repetroot Type Position RepetSlice  
			    //0     2    3       5a          4          5b
				String bl0=baseName.split("_")[0];
				String bl1=baseName.split("_")[1];
				String bl2=baseName.split("_")[2];
				System.out.println("Bl0="+bl0);
				System.out.println("Bl1="+bl1);
				System.out.println("Bl2="+bl2);
				tab[1]="Roottype-"+bl1.charAt(2);
				tab[2]=""+bl0;//Geno
				tab[3]=""+bl1.charAt(0);//Management
				tab[4]=""+bl1.charAt(3);//Depth
				tab[5]="Root-"+bl1.charAt(1)+"_Slice-"+bl2;//Repet
				tab[6]="10x(guessed)";//Magnification
			}
			if(typeThis==typeSergi){
				tab[1]="No info";
				tab[2]="No info";//Geno
				tab[3]="No info";//Management
				tab[4]="No info";//Depth
				tab[5]=baseName;//Repet
				tab[6]=""+getMagnification(dirSource+"/"+baseName+".tif");//Magnification
			}


			//"10_MEASURE_imaged_cortex_surface"
			//"11_MEASURE_imaged_lacune_surface"
			double imagedCortex=0;
			double imagedLacune=0;
			ImagePlus img=IJ.openImage(dirSource+"/"+baseName+".tif");			
			IJ.open(dirRoi+"/"+baseName+".tif.zip");
			RoiManager rm=RoiManager.getInstance();
			int nR=rm.getCount();
			boolean []isLacune=new boolean[nR];
			String[][]tabLac=VitimageUtils.readStringTabFromCsv(dirLac+"/"+baseName+".tif.csv");
			for(int l=1;l<tabLac.length;l++) {
				int index=0;
				//if(tabLac[0].length==3)index=Integer.parseInt(tabLac[l][2])-1;
				//else 
				index=Integer.parseInt(tabLac[l][1])-1;
				if(index>=isLacune.length) {
					System.out.println("Alerte : "+index);
				}
				else isLacune[index]=true;
			}
			int totNbCell=0;
			int totNbLac=0;
			for(int r=0;r<nR;r++) {
				totNbCell++;
				double surf=getRoiSurface(rm.getRoi(r));
				imagedCortex+=surf;
				if(isLacune[r]) {
					imagedLacune+=surf;
					totNbLac++;
				}
			}
			tab[10]=""+(imagedCortex);
			tab[11]=""+imagedLacune;		

			
			//"7_MEASURE_total_cortex_surface"
			//"8_MEASURE_strict_stele_surface_without_endoderm"
			//"9_MEASURE_endoderm_surface"
			rm.reset();
			IJ.open(dirCortex+"/"+baseName+".tifstele_out.zip");
			double strictStele=getRoiSurface(rm.getRoi(0));
			rm.reset();

			IJ.open(dirCortex+"/"+baseName+".tifcortex_in.zip");
			double cortexIn=getRoiSurface(rm.getRoi(0));
			rm.reset();

			IJ.open(dirCortex+"/"+baseName+".tifcortex_convexhull.zip");
			double cortexEndodermAndStele=getRoiSurface(rm.getRoi(0));
			rm.reset();

			tab[7]=""+(cortexEndodermAndStele-cortexIn);
			tab[8]=""+(strictStele);
			tab[9]=""+(cortexIn-strictStele);

			if(imagedLacune > imagedCortex) {
				IJ.log("WARNING  ! BIG PROBLEM \n\n\nWARNING BIG PRROBLEM\n\n");
				VitimageUtils.waitFor(10000);
			}

			//"12_COMPUTED_ratio_lacune_over_imaged_cortex"
			//"13_COMPUTED_Full_cortex_over_strict_stele_ratio"

			tab[12]=""+dou(100*imagedLacune/(imagedCortex));
			tab[13]=""+dou((cortexEndodermAndStele-cortexIn)/(strictStele));
			finalTab[i+1]=tab;
			rm.reset();
		}
		writeStringTabInCsv2(finalTab, pathToOutputCsv);
		IJ.showMessage("Finished!");
	}
	public String getDirBeanshell(){
		s1=IJ.getDirectory("imagej")+"macros/pathProcessing.txt";
		BufferedReader reader = new BufferedReader(new FileReader(s1));
		String line = reader.readLine();
		reader.close();
		s2=line.split("\n")[0];
		s3=s2.split("\r\n")[0];
		s4=s3.split("\r")[0];
		return s4;
	}
	public static void writeStringTabInCsv2(String[][]tab,String fileName) {
	//	System.out.println("Impression de tableau de taille "+tab.length+" x "+tab[0].length);
		try { 
			PrintStream l_out = new PrintStream(new FileOutputStream(fileName)); 
			for(int i=0;i<tab.length;i++) {
				for(int j=0;j<tab[i].length;j++) {
					l_out.print(tab[i][j]+(j<tab[i].length-1 ? "," : "")); 
				}
				l_out.println(""); 
			}
			l_out.flush(); 
			l_out.close(); 
			l_out=null; 
		} 
		catch(Exception e){System.out.println(e.toString());} 
	}
	
	public static double dou(double d){
		if(d<0)return (-dou(-d));
		if (d<0.0001)return 0;
		return (double)(Math.round(d * 10000)/10000.0);
	}


	public static double getRoiSurface(Roi r) {
        int x0=(int)Math.floor(r.getBounds().getMinX());
        int x1=(int)Math.floor(r.getBounds().getMaxX());
        int y0=(int)Math.floor(r.getBounds().getMinY());
        int y1=(int)Math.floor(r.getBounds().getMaxY());
        int inter=0;
        for(int x=x0;x<=x1;x++) {
            for(int y=y0;y<=y1;y++) {
                if(r.contains(x, y))inter++;
            }
        }
        return inter;
   	
    }

	
	/** Some Csv helpers   --------------------------------------------------------------------------------------   */
	public static String[][]readStringTabFromCsv(String csvPath){
	    return VitimageUtils.readStringTabFromCsv(csvPath);
	}

	
	public static double getMagnification(String path) {
		ImagePlus img=IJ.openImage(path);
		double d=0;
		if(img.getInfoProperty().split("Objective Correction").length>1) {
			d=Double.parseDouble( img.getInfoProperty().split("Objective Correction")[1].split("NominalMagnification")[1].split("\"")[1]);
			System.out.println("Detected : "+d);
			return d;
		}
		else d=20;
		System.out.println("Guessed : "+d);
		return d;
	}

	public static int determineProvider(String[]tab){
		String str=tab[0].replace(".tif","");
		//Paola=at least 8 caracters
		//If so, test if there is two occurences of underscore
		//if so, test if between the two underscore there is 4 caracters
		if( (str.length()>=8) && (str.split("_").length==3) && (str.split("_")[1].length()==4) ) return 1; //Paola
		
		//Pheno=at least 9 caracters		
		//If so, test if there is 4 underscores
		//If so, test if the second and third compartment have exactly one caracter
		if( (str.length()>=9) && (str.split("_").length==5) && (str.split("_")[1].length()==1) && (str.split("_")[2].length()==1) ) return 2; //Pheno

		return 0; //default=Sergi
	}



	public static test(){
		String []namesPaola=new String[]{"1_ASDE_10.tif"};
		String []namesPaola2=new String[]{"1_ASDE_10.tif","A_ASDE_3.tif"};
		String []namesSergi=new String[]{"bla.tif"};
		String []namesSergi2=new String[]{"bla.tif","1.tif","trucmuche_de_ouf-avec-des-car.tif"};
		String []namesPheno=new String[]{"13_M_I_10_a.tif"};
		String []namesPheno2=new String[]{"13_M_I_10_a.tif","2_M_I_3_a.tif","202_M_I_3_a.tif"};
		IJ.log("Paola 1 = "+determineProvider(namesPaola));
		IJ.log("Paola 2 = "+determineProvider(namesPaola2));
		IJ.log("Sergi 1 = "+determineProvider(namesSergi));
		IJ.log("Sergi 2 = "+determineProvider(namesSergi2));
		IJ.log("Pheno 1 = "+determineProvider(namesPheno));
		IJ.log("Pheno 2 = "+determineProvider(namesPheno2));
	}




	String dirName=getDirBeanshell();
	computeSummaryOfLacuneData(dirName,dirName+"/Results_aerenchyme_measurements.csv",true);
//	test();
 
	//String dirExp="/home/rfernandez/Bureau/A_Test/Aerenchyme/Benoit_Exp7_E7";	
	//computeSummaryOfLacuneData(dirExp,dirExp+"/Results_aerenchyme_measurements.csv",true);
	
